"needs \"Examples/group_sylow-compiled.hl\"".

(* Some experimental sections *)


(* Morph *)
Section Morph.

Variable G : `:A->bool`.
Variable e : `:A`.
Variable op : `:A -> A -> A`.
Variable i : `:A -> A`.
Hypothesis grG : `group (G,op,i,e)`.

Variable H : `:B->bool`.
Variable hop : `:B->B->B`.
Variable he : `:B`.
Variable hi : `:B->B`.
Hypothesis grH : `group (H, hop, hi, he)`.

Variable f : `:A->B`.
Hypothesis morph : `morphism f op hop G H`.

Lemma morph_closed x : `x IN G ==> f x IN H`. by move: morph; rewrite morphism /=. Qed.
Lemma morph_mul x y : `x IN G ==> y IN G ==> f (op x y) = hop (f x) (f y)`.
by move: morph; rewrite morphism /=. Qed.

Lemma morph_e : `f e = he`.
have: `f e = hop (f e) (f e)`.
  by rewrite -{1}(mulg1 grG e) ?morph_mul ?(e_in_group grG).
rewrite -{1}[`f e`](mul1g grH) ?morph_closed ?(e_in_group grG).
move: (mulg_rightI grH `f (e:A):B` he `f (e:A):B`).
by rewrite !morph_closed ?(e_in_group grG) ?(e_in_group grH) /=.
Qed.

Lemma morph_i x : `x IN G ==> f (i x) = hi (f x)`.
move => xG.
apply: ("REWRITE_RULE[IMP_IMP] i_uniq" grH).
rewrite !morph_closed ?(i_in_group grG) //=.
by rewrite -morph_mul ?(i_in_group grG) // (mulgI grG) // morph_e.
Qed.

End Morph.


Lemma real_group : `group((:real), (+), (--), &0)`.
by rewrite group !IN_UNIV /= REAL_ADD_LID REAL_ADD_RID /= REAL_ADD_LINV REAL_ADD_RINV /= REAL_ADD_ASSOC. Qed.

Lemma real_mul_group : `group({x | &0 < x}, (*), inv, &1)`.
rewrite group; rewr IN_ELIM_THM; rewrite REAL_MUL_LID REAL_MUL_RID REAL_MUL_ASSOC REAL_LT_01 /=. split; first by apply: REAL_LT_MUL.
split; first by apply: REAL_LT_INV.
by move => x /REAL_POS_NZ x0; rewrite REAL_MUL_RINV // REAL_MUL_LINV.
Qed.

Lemma test x y : `&0 < y ==> &0 < x ==> inv (x * y) = inv y * inv x`.
move => y0 x0.
by rewrite (mulI real_mul_group) //; rewr IN_ELIM_THM.
Qed.


Section BijGroup.

Implicit Type s t : `:A->bool`.

"let inv_fun = new_definition `inv_fun s t f = 
	(\y. if y IN t then @x. f x = y /\ x IN s else y)`".

Lemma inv_fun_spec f s t y : `(?x. x IN s /\ f x = y) ==> y IN t ==>
		inv_fun s t f y IN s /\ f (inv_fun s t f y) = y`.
rewrite inv_fun /= => [] [z] [zs fzy] yt.
set P := `\x. f x = y /\ x IN s`.
have/SELECT_AX: `P z`; first by rewrite -P_def /=.
by rewrite -P_def /=.
Qed.

Lemma inv_fun_surj_in f s t y : `SURJ f s t ==> y IN t ==> inv_fun s t f y IN s`.
rewrite SURJ => [] [_ sf] yt.
by move: (inv_fun_spec (sf yt) yt) => [H _].
Qed.

Lemma inv_fun_rid f s t y : `SURJ f s t ==> y IN t ==> f (inv_fun s t f y) = y`.
rewrite SURJ => [] [_ sf] yt.
by move: (inv_fun_spec (sf yt) yt) => [_].
Qed.

Lemma inv_fun_lid f s t x : `INJ f s t ==> x IN s ==> inv_fun s t f (f x) = x`.
rewrite INJ => [] [f_in f_inj] xs.
apply: f_inj; rewrite xs /=.
apply "REWRITE_RULE[IMP_IMP] inv_fun_spec".
by rewrite f_in //=; exists x.
Qed.

"let bij_s = new_definition `bij_s f s <=> BIJ f s s /\ (!x. ~(x IN s) ==> f x = x)`".


Lemma f_ext f g: `(f = g) <=> (!x. f x = g x)`.
split => [-> //| eq].
by rewrite -[`f`]ETA_AX -[`g`]ETA_AX; "ABS_TAC".
Qed.


Lemma bij_ext s t f: `s SUBSET t ==> bij_s f s ==> bij_s f t`.
rewrite SUBSET !bij_s !BIJ => s_t [[inj_f surj_f] f_out]; split => [|x xnt]; last first.
  move: (s_t x); rewrite -[`x IN s ==> _`]CONTRAPOS_THM => h; apply: f_out.
  exact: h.
move: surj_f inj_f; rewr !INJ !SURJ -!IMP_IMP => fs f_surj _ f_inj.
do 2!split; move => x; case: (EXCLUDED_MIDDLE `x IN s`) => xs.
  by move: (fs xs) => /s_t /=.
  by move: (f_out xs) => ->.
  move => y; case: (EXCLUDED_MIDDLE `y IN s`) => ys _ _.
    by move => eq; apply: (f_inj xs ys).
  rewrite (f_out ys) => eq.
  by move: (fs xs) ys; rewrite eq /=.
  move => y; case: (EXCLUDED_MIDDLE `y IN s`) => ys _ _; last by rewrite !f_out.
  rewrite f_out // => eq; move: (fs ys) xs.
  by rewrite -eq /=.
  by move => _; apply: s_t; apply: fs.
  by rewrite f_out.
  move => _; move: (f_surj xs) => [y] [/s_t yt eq].
  by exists y.
by move => xt; exists x; rewrite f_out.
Qed.
    

  
Lemma inv_fun_ext s t f : `s SUBSET t ==> bij_s f s ==> inv_fun t t f = inv_fun s s f`.
move => st bs.
move: st bs (bij_ext st bs).
rewrite SUBSET !bij_s !BIJ f_ext => s_t [[inj_s surj_s] s_out] [[inj_t surj_t] t_out] x.
case: (EXCLUDED_MIDDLE `x IN s`) => xs; last first.
  rewrite -(s_out xs).
  case: (EXCLUDED_MIDDLE `x IN t`) => xt.
    by rewrite inv_fun_lid // inv_fun /= (s_out xs).
  by rewrite !inv_fun /= (s_out xs).
have xt := s_t xs.
move: (inj_t); rewrite INJ => [] [_]; apply.
rewrite !inv_fun_surj_in //= s_t ?inv_fun_surj_in //=.
by rewrite !inv_fun_rid.
Qed.


Lemma bij_group s t : `s SUBSET t ==> group({f | bij_s f s}, (o), inv_fun t t, I)`.
move/inv_fun_ext => inv_ext.
rewr group IN_ELIM_THM bij_s BIJ !o_THM !I_THM; do 8?split.

rewr INJ SURJ -20!IMP_IMP !o_THM.
move => f g fs f_inj _ f_surj f_out gs g_inj _ g_surj g_out; do 2?split; last first.
  move => x xns.
  by rewrite (g_out xns) f_out.
split => [x /gs /fs //| x y xs ys f_eq].
  by rewrite (g_inj x y) // xs ys /= (f_inj `g x` `g y`) // !gs //.
split => [x /gs /fs //| x xs].
move: (f_surj xs) => [z] [zs <-].
move: (g_surj zs) => [y] [ys eq].
by exists y.

move => f [[f_inj f_surj] f_out]; rewrite inv_ext ?bij_s ?BIJ //.
split; last by move => x xns; rewrite inv_fun.
split.
  rewrite INJ; split => [x /(inv_fun_surj_in f_surj) // |].
  move => x y [xs [ys inv_eq]].
  have H := inv_fun_rid f_surj.
  by move: (H xs) (H ys); rewrite inv_eq => ->.
rewrite SURJ; split => [x /(inv_fun_surj_in f_surj) // |].
move => x xs.
exists `f x`; move: (f_inj); rewrite INJ => [] [fs _].
by rewrite (fs xs) /= (inv_fun_lid f s s) //.

by rewrite INJ !I_THM /=.

rewrite SURJ !I_THM /= => x xs.
by exists x.

by rewr I_O_ID.

move => f [[f_inj f_surj] f_out]; rewrite inv_ext ?bij_s ?BIJ //.
rewrite !f_ext !o_THM I_THM; split => x.
  case: (EXCLUDED_MIDDLE `x IN s`) => xs; first by rewrite inv_fun_rid.
  by rewr inv_fun /= xs /=; exact: f_out.
case: (EXCLUDED_MIDDLE `x IN s`) => xs; first by rewrite inv_fun_lid.
rewr inv_fun /=.
by move: (f_out xs) => ->; rewr xs.

by rewrite o_ASSOC.
Qed.


Lemma bij_gr s : `group ({f | bij_s f s}, (o), inv_fun s s, I)`.
by apply: bij_group; rewrite SUBSET_REFL. Qed.


Lemma test s f g : `bij_s f s ==> bij_s g s ==> inv_fun s s (f o g) = inv_fun s s g o inv_fun s s f`.
move => bf bg.
by rewrite (mulI (bij_gr s)) //; rewr IN_ELIM_THM.
Qed.


Lemma bij_sub s t : `s SUBSET t ==> subgroup (o) (inv_fun t t) {f | bij_s f s} {g | bij_s g t}`.
move => s_t; rewrite subgroup; split.
  by rewrite SUBSET; rewr IN_ELIM_THM => f; exact: bij_ext.
split.
  rewrite -MEMBER_NOT_EMPTY; exists `I:A->A`.
  by rewrite (e_in_group (bij_gr s)).
move => f g [fb gb].
by rewrite (in_group (bij_gr s)) fb /= (i_in_group (bij_group s_t)).
Qed.


End BijGroup.

